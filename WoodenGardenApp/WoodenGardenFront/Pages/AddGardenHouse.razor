@page "/AddGardenHouse"
@using WoodenGardenFront.Helpers.JsHelpers
@using WoodenGardenFront.Properties
@using WoodenGardenFront.Services.IServices
@using WoodenGardenApp.Shared.DTOs
@using Blazored.TextEditor
@inject IGardenHouseService _gardenHouseService
@inject IGardenHouseImageService _gardenHouseImageService
@inject IJSRuntime _jsRuntime

<div class="container align-self-center mt-2 border-dark border-2 bg-light">
    <EditForm Model="@GardenHouseDTO" OnValidSubmit="AddGardenHouseToDatabase">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label>Garden house name</label>
            <InputText @bind-Value="GardenHouseDTO.Name"></InputText>
            <ValidationMessage For="() => GardenHouseDTO!.Name"/>
        </div>
        <div class="form-group">
            <label>Garden house description</label>
            <BlazoredTextEditor @ref="BlazoredTextEditor" Placeholder="Enter garden house description">
                <ToolbarContent>
                    <select class="ql-header">
                        <option selected=""></option>
                        <option value="1"></option>
                        <option value="2"></option>
                        <option value="3"></option>
                        <option value="4"></option>
                        <option value="5"></option>
                    </select>
                    <span class="ql-formats">
                        <button class="ql-bold"></button>
                        <button class="ql-italic"></button>
                        <button class="ql-underline"></button>
                        <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                        <select class="ql-color"></select>
                        <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-link"></button>
                    </span>
                </ToolbarContent>
                <EditorContent>@((MarkupString) DescriptionHTML!)</EditorContent>
            </BlazoredTextEditor>
        </div>
        
        <div class="form-group" style="padding-top: 70px;">
            <InputFile OnChange="HandleImageUpload" multiple class="btn btn-secondary"/>
            
            <div class="row">
                @if (GardenHouseDTO is not null || GardenHouseDTO!.Images!.Any())
                {
                    
                }
            </div>
        </div>
        
        <div class="form-group">
            <button class="btn btn-primary">Add room</button>
            <NavLink href="gardenhouses" class="btn btn-outline-info">Back</NavLink>
        </div>
    </EditForm>
</div>

@code {
    private GardenHouseDTO? GardenHouseDTO { get; } = new();
    private BlazoredTextEditor? BlazoredTextEditor { get; set; } = new();
    private string? DescriptionHTML { get; set; }

    protected override Task OnInitializedAsync()
    {
        if (GardenHouseDTO is not null)
        {
            DescriptionHTML = GardenHouseDTO.Description ?? string.Empty;
        }
        
        return Task.CompletedTask;
    }

    private async Task AddGardenHouseToDatabase()
    {
        GardenHouseDTO!.Description = await BlazoredTextEditor!.GetHTML();
        await _gardenHouseService.AddGardenHouse(GardenHouseDTO!.Name, GardenHouseDTO.Description);
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs args)
    {
        try
        {
            if (args.GetMultipleFiles().Count == 0)
            {
                return;
            }

            foreach (var file in args.GetMultipleFiles())
            {
                var fileInfo = new FileInfo(file.Name);

                if (!(fileInfo.Extension.Equals(".jgp", StringComparison.OrdinalIgnoreCase) ||
                      fileInfo.Extension.Equals(".png", StringComparison.OrdinalIgnoreCase) ||
                      fileInfo.Extension.Equals(".jpg", StringComparison.OrdinalIgnoreCase) ||
                      fileInfo.Extension.Equals(".jpeg", StringComparison.OrdinalIgnoreCase)))
                {
                    await _jsRuntime.ToastrError($"{ErrorMessages.Client_FileUpload_FileExtensionNotSupported}\nImage: {fileInfo.Name}");
                    continue;
                }

                var memoryStream = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(memoryStream);

                var imageBase64 = Convert.ToBase64String(memoryStream.ToArray());
                await _gardenHouseImageService.AddImage(GardenHouseDTO!.Id, imageBase64);
            }
        }
        catch (Exception)
        {
            
        }
    }
}
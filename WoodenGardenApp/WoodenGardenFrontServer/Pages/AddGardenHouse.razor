@page "/AddGardenHouse"
@page "/AddGardenHouse/{Id:int}"

@using WoodenGardenFront.Helpers.JsHelpers
@using WoodenGardenFront.Properties
@using WoodenGardenApp.Shared.DTOs
@using Blazored.TextEditor
@using WoodenGardenFrontServer.Properties
@using WoodenGardenFrontServer.Services.IServices
@inject IGardenHouseService _gardenHouseService
@inject IGardenHouseImageService _gardenHouseImageService
@inject IImageHandlingService _imageHandlingService
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager

<h3>@(IsEditMode ? "Edit" : "Create") mode</h3>

<div class="container align-self-center mt-2 border-dark border-2 bg-light">
    <EditForm Model="@GardenHouseDTO" OnValidSubmit="AddGardenHouseToDatabase">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label>Garden house name</label><br/>
            <InputText @bind-Value="GardenHouseDTO.Name"></InputText>
            <ValidationMessage For="() => GardenHouseDTO!.Name"/>
        </div>
        <div class="form-group">
            <label>Garden house description</label>
            <BlazoredTextEditor @ref="BlazoredTextEditor" Placeholder="Enter garden house description">
                <ToolbarContent>
                    <select class="ql-header">
                        <option selected=""></option>
                        <option value="1"></option>
                        <option value="2"></option>
                        <option value="3"></option>
                        <option value="4"></option>
                        <option value="5"></option>
                    </select>
                    <span class="ql-formats">
                        <button class="ql-bold"></button>
                        <button class="ql-italic"></button>
                        <button class="ql-underline"></button>
                        <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                        <select class="ql-color"></select>
                        <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-link"></button>
                    </span>
                </ToolbarContent>
                <EditorContent>@((MarkupString) DescriptionHTML!)</EditorContent>
            </BlazoredTextEditor>
        </div>
        
        <div class="row">
            @if (GardenHouseDTO is not null && GardenHouseDTO!.GardenHouseImages is not null && GardenHouseDTO!.GardenHouseImages!.Any())
            {
                var images = GardenHouseDTO!.GardenHouseImages!.Select(image => image.ImagePath).ToList();
                @foreach (var image in images)
                {
                    var imagePath = Path.Combine(SettingsConstants.ImagesFolder, image ?? string.Empty);
                    <div class="col-md-2 mt-3">
                        <img class="d-block w-100" src="@imagePath" alt="Home photo">
                        @if (ImagesToBeDeleted.Contains(image!))
                        {
                            <button type="button" class="btn btn-danger btn-block mt-3" onclick="@(() => ImagesToBeDeleted.Remove(image!))">Delete</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-outline-danger btn-block mt-3" onclick="@(() => ImagesToBeDeleted.Add(image!))">Delete</button>
                        }
                    </div>
                }
            }
        </div>
        
        <div class="form-group" style="padding-top: 70px;">
            <InputFile OnChange="HandleImageUpload" multiple class="btn btn-secondary"/>
        </div>
        
        <div class="form-group">
            <button class="btn btn-primary">@(IsEditMode ? "Edit" : "Add") room</button>
            <NavLink href="gardenhouses" class="btn btn-outline-info">Back</NavLink>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    
    private GardenHouseDTO? GardenHouseDTO { get; set; } = new();
    private BlazoredTextEditor? BlazoredTextEditor { get; set; } = new();
    private List<IBrowserFile> HouseImages { get; } = new();
    private List<string> ImagesToBeDeleted { get; } = new();
    private string? DescriptionHTML { get; set; }
    private bool IsEditMode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
        {
            IsEditMode = true;
            await LoadGardenHouseIfEdit();
        }
    }

    private async Task LoadGardenHouseIfEdit()
    {
        var gardenHouses = await _gardenHouseService.GetGardenHouses();
        GardenHouseDTO = gardenHouses!.FirstOrDefault(gardenHouse => gardenHouse.Id == Id);

        if (GardenHouseDTO is null)
        {
            await _jsRuntime.ToastrError(ErrorMessages.Client_GardenHouseService_GetHousesError);
            return;
        }
        
        DescriptionHTML = GardenHouseDTO.Description ?? string.Empty;
    }

    private async Task AddGardenHouseToDatabase()
    {
        if (IsEditMode)
        {
            await EditGardenHouseInDb();
            return;
        }
        
        GardenHouseDTO!.Description = await BlazoredTextEditor!.GetHTML();
        var addedHouseId = await _gardenHouseService.AddGardenHouse(GardenHouseDTO!.Name, GardenHouseDTO.Description);
        
        await SaveImages(addedHouseId);

        _navigationManager.NavigateTo("gardenhouses");
    }

    private async Task EditGardenHouseInDb()
    {
        await _gardenHouseService.UpdateGardenHouse(GardenHouseDTO!.Id, GardenHouseDTO.Name, GardenHouseDTO.Description);
        await SaveImages(GardenHouseDTO!.Id);

        if (ImagesToBeDeleted.Any())
        {
            foreach (var image in ImagesToBeDeleted)
            {
                var imageModel = GardenHouseDTO!.GardenHouseImages?.FirstOrDefault(img => img.ImagePath!.Equals(image));
                
                await _imageHandlingService.DeleteImage(image);
                
                if (imageModel is not null)
                {
                    await _gardenHouseImageService.DeleteImage(imageModel.Id);
                }
            }
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs args)
    {
        try
        {
            if (args.GetMultipleFiles().Count == 0)
            {
                return;
            }

            foreach (var file in args.GetMultipleFiles())
            {
                var fileInfo = new FileInfo(file.Name);

                if (!(fileInfo.Extension.Equals(".jgp", StringComparison.OrdinalIgnoreCase) ||
                      fileInfo.Extension.Equals(".png", StringComparison.OrdinalIgnoreCase) ||
                      fileInfo.Extension.Equals(".jpg", StringComparison.OrdinalIgnoreCase) ||
                      fileInfo.Extension.Equals(".jpeg", StringComparison.OrdinalIgnoreCase)))
                {
                    await _jsRuntime.ToastrError($"{ErrorMessages.Client_FileUpload_FileExtensionNotSupported}\nImage: {fileInfo.Name}");
                    continue;
                }
                
                HouseImages.Add(file);
            }
        }
        catch (Exception)
        {
            await _jsRuntime.ToastrError(ErrorMessages.Client_FileUpload_FileNotAdded);
        }
    }

    private async Task SaveImages(int houseId)
    {
        if (!HouseImages.Any())
        {
            return;
        }
        
        var savedImageFiles = new List<string>();
        foreach (var image in HouseImages)
        {
            savedImageFiles.Add(await _imageHandlingService.SaveImage(image));
        }

        foreach (var imagePath in savedImageFiles)
        {
            await _gardenHouseImageService.AddImage(houseId, imagePath);
        }
    }
}